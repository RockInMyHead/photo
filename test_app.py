#!/usr/bin/env python3
"""
Test application to verify Photo Sorter works
"""

import sys
import os

def test_imports():
    """Test all imports"""
    print("üîç Testing imports...")

    try:
        from PyQt6.QtWidgets import QApplication, QMessageBox
        print("‚úÖ PyQt6 imported successfully")
    except ImportError as e:
        print(f"‚ùå PyQt6 failed: {e}")
        return False

    try:
        import cv2
        print("‚úÖ OpenCV imported successfully")
    except ImportError as e:
        print(f"‚ùå OpenCV failed: {e}")
        return False

    try:
        import numpy as np
        print("‚úÖ NumPy imported successfully")
    except ImportError as e:
        print(f"‚ùå NumPy failed: {e}")
        return False

    try:
        from PIL import Image
        print("‚úÖ Pillow imported successfully")
    except ImportError as e:
        print(f"‚ùå Pillow failed: {e}")
        return False

    return True

def test_ui_components():
    """Test UI components"""
    print("\nüîç Testing UI components...")

    try:
        from ui.photo_viewer import PhotoViewer
        print("‚úÖ PhotoViewer imported")
    except ImportError as e:
        print(f"‚ùå PhotoViewer failed: {e}")
        return False

    try:
        from ui.directory_scanner import DirectoryScanner
        print("‚úÖ DirectoryScanner imported")
    except ImportError as e:
        print(f"‚ùå DirectoryScanner failed: {e}")
        return False

    try:
        from ui.face_processor_simple import SimpleFaceProcessor
        print("‚úÖ SimpleFaceProcessor imported")
    except ImportError as e:
        print(f"‚ùå SimpleFaceProcessor failed: {e}")
        return False

    try:
        from ui.photo_list_model import PhotoListModel
        print("‚úÖ PhotoListModel imported")
    except ImportError as e:
        print(f"‚ùå PhotoListModel failed: {e}")
        return False

    try:
        from ui.photo_sorter import PhotoSorter
        print("‚úÖ PhotoSorter imported")
    except ImportError as e:
        print(f"‚ùå PhotoSorter failed: {e}")
        return False

    return True

def show_success_message():
    """Show success message using GUI"""
    app = QApplication(sys.argv)

    msg = QMessageBox()
    msg.setIcon(QMessageBox.Icon.Information)
    msg.setWindowTitle("üéâ –£—Å–ø–µ—Ö!")
    msg.setText("Photo Sorter —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
               "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n"
               "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏:\n"
               "python main_simple_fixed.py")
    msg.setStandardButtons(QMessageBox.StandardButton.Ok)
    msg.exec()

def main():
    """Main test function"""
    print("üöÄ Photo Sorter - Test Mode")
    print("=" * 50)

    # Check Python version
    print(f"üêç Python version: {sys.version}")

    # Test imports
    if not test_imports():
        print("\n‚ùå Some basic imports failed!")
        return

    # Test UI components
    if not test_ui_components():
        print("\n‚ùå Some UI components failed!")
        return

    print("\n" + "=" * 50)
    print("‚úÖ All tests passed!")
    print("üéâ Photo Sorter is ready to use!")
    print("\nTo run the application:")
    print("python main_simple_fixed.py")
    print("\n" + "=" * 50)

    # Show GUI success message
    try:
        show_success_message()
    except Exception as e:
        print(f"GUI message failed (expected in console): {e}")
        print("But that's OK - the app will work fine!")

if __name__ == "__main__":
    main()


