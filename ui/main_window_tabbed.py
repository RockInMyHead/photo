"""
Main Window with Tabbed Interface for Photo Sorting Application
Divided into logical pages for better user experience
"""

from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QTreeView, QListView, QLabel, QPushButton, QProgressBar,
    QStatusBar, QMenuBar, QMenu, QFileDialog, QMessageBox,
    QGroupBox, QGridLayout, QScrollArea, QLineEdit, QTabWidget
)
from PyQt6.QtCore import Qt, QDir, QThread, pyqtSignal
from PyQt6.QtGui import QIcon, QAction, QPixmap
import os

from .photo_viewer import PhotoViewer
from .directory_scanner import DirectoryScanner
from .face_processor_simple import SimpleFaceProcessor
from .photo_list_model import PhotoListModel
from .photo_sorter import PhotoSorter
from .insight_sorter import InsightFaceSorter
from .queue_manager import QueueManager, ProcessingJob, JobStatus, QueueWidget
from .modern_styles import MODERN_STYLESHEET, COLORS, apply_button_style, apply_label_style


class OverviewTab(QWidget):
    """Overview and Quick Start Tab"""
    
    def __init__(self, parent):
        super().__init__()
        self.parent_window = parent
        self.setup_ui()
    
    def setup_ui(self):
        """Setup overview tab UI"""
        layout = QVBoxLayout(self)
        
        # Welcome section
        welcome_section = QGroupBox("üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Photo Sorter")
        welcome_layout = QVBoxLayout(welcome_section)
        
        title = QLabel("–£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –ª—é–¥—è–º")
        apply_label_style(title, "title")
        welcome_layout.addWidget(title)
        
        description = QLabel(
            "üñºÔ∏è –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –ª—é–¥—è–º\n\n"
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
            "‚Ä¢ –ù–∞–π–¥–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –ª–∏—Ü–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –°–≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ñ–æ—Ç–æ –ø–æ –ª—é–¥—è–º\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –ø–∞–ø–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n\n"
            "–í—Å–µ–≥–æ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞!"
        )
        apply_label_style(description, "subtitle")
        welcome_layout.addWidget(description)
        
        layout.addWidget(welcome_section)
        
        # Quick start section
        quick_section = QGroupBox("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        quick_layout = QVBoxLayout(quick_section)
        
        # Step 1
        step1_layout = QHBoxLayout()
        step1_num = QLabel("1Ô∏è‚É£")
        step1_num.setFixedWidth(40)
        step1_layout.addWidget(step1_num)
        
        self.select_input_btn = QPushButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
        self.select_input_btn.clicked.connect(self.select_input_directory)
        apply_button_style(self.select_input_btn, "large")
        step1_layout.addWidget(self.select_input_btn)
        
        self.input_path_label = QLabel("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        apply_label_style(self.input_path_label, "caption")
        step1_layout.addWidget(self.input_path_label)
        
        quick_layout.addLayout(step1_layout)
        
        # Step 2 (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        step2_layout = QHBoxLayout()
        step2_num = QLabel("2Ô∏è‚É£")
        step2_num.setFixedWidth(40)
        step2_layout.addWidget(step2_num)

        step2_text = QLabel("üì§ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        apply_label_style(step2_text, "caption")
        step2_layout.addWidget(step2_text)

        self.output_path_label = QLabel("–í—Ö–æ–¥–Ω–∞—è_–ø–∞–ø–∫–∞/PhotoSorter_Results")
        apply_label_style(self.output_path_label, "success")
        step2_layout.addWidget(self.output_path_label)

        quick_layout.addLayout(step2_layout)
        
        # Step 3
        step3_layout = QHBoxLayout()
        step3_num = QLabel("3Ô∏è‚É£")
        step3_num.setFixedWidth(40)
        step3_layout.addWidget(step3_num)
        
        self.start_btn = QPushButton("üé¨ –°–¢–ê–†–¢ - –ù–∞—á–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É!")
        self.start_btn.clicked.connect(self.start_processing)
        self.start_btn.setEnabled(False)
        apply_button_style(self.start_btn, "large success")
        step3_layout.addWidget(self.start_btn)
        
        quick_layout.addLayout(step3_layout)
        
        layout.addWidget(quick_section)
        

        
        # Status section
        status_section = QGroupBox("üìä –°—Ç–∞—Ç—É—Å")
        status_layout = QVBoxLayout(status_section)
        
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        apply_label_style(self.status_label, "subtitle")
        status_layout.addWidget(self.status_label)
        
        layout.addWidget(status_section)
        layout.addStretch()
    
    def cancel_operation(self):
        """Cancel current operation"""
        processing_tab = self.parent_window.tab_widget.widget(1)
        processing_tab.cancel_operation()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.progress_section.setVisible(False)
        self.start_btn.setEnabled(True)
        self.start_btn.setText("üé¨ –°–¢–ê–†–¢ - –ù–∞—á–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É!")
        self.status_label.setText("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    def on_processing_finished(self, success=True):
        """Called when processing is finished"""
        self.progress_section.setVisible(False)
        self.start_btn.setEnabled(True)
        self.start_btn.setText("üé¨ –°–¢–ê–†–¢ - –ù–∞—á–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É!")
        
        if success:
            self.status_label.setText("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É PhotoSorter_Results.")
        else:
            self.status_label.setText("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
    
    def select_input_directory(self):
        """Select input directory"""
        directory = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
        if directory:
            self.parent_window.current_directory = directory
            self.input_path_label.setText(os.path.basename(directory))
            apply_label_style(self.input_path_label, "success")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –∫–∞–∫ –ø–æ–¥–ø–∞–ø–∫—É –≤—Ö–æ–¥–Ω–æ–π
            output_dir = os.path.join(directory, "PhotoSorter_Results")
            self.parent_window.output_directory = output_dir
            self.output_path_label.setText(f"{os.path.basename(directory)}/PhotoSorter_Results")
            apply_label_style(self.output_path_label, "success")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢
            self.start_btn.setEnabled(True)
            self.status_label.setText(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ! –ù–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢ –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    
    def start_processing(self):
        """Start full automated processing"""
        if hasattr(self.parent_window, 'current_directory'):
            input_dir = self.parent_window.current_directory
            output_dir = self.parent_window.output_directory
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            reply = QMessageBox.question(
                self, 
                '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞', 
                f'–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É?\n\n'
                f'üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {os.path.basename(input_dir)}\n'
                f'üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: PhotoSorter_Results\n\n'
                f'–ü—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π:\n'
                f'‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n'
                f'‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü\n'
                f'‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞\n\n'
                f'–í—ã —É–≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.', 
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                self.progress_section.setVisible(True)
                self.progress_bar.setVisible(True)
                self.cancel_btn.setVisible(True)
                
                # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –°–¢–ê–†–¢
                self.start_btn.setEnabled(False)
                self.start_btn.setText("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.current_operation_label.setText("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
                self.status_label.setText("‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–û–±—Ä–∞–±–æ—Ç–∫–∞' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.")
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É Processing
                self.parent_window.tab_widget.setCurrentIndex(1)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                processing_tab = self.parent_window.tab_widget.widget(1)
                processing_tab.start_full_processing(input_dir, output_dir)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!")


class ProcessingTab(QWidget):
    """Processing and Manual Control Tab"""
    
    def __init__(self, parent):
        super().__init__()
        self.parent_window = parent
        self.setup_ui()
    
    def setup_ui(self):
        """Setup processing tab UI"""
        layout = QVBoxLayout(self)
        
        # Current operation section
        current_section = QGroupBox("üîÑ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
        current_layout = QVBoxLayout(current_section)
        
        self.current_operation_label = QLabel("–û–∂–∏–¥–∞–Ω–∏–µ...")
        apply_label_style(self.current_operation_label, "subtitle")
        current_layout.addWidget(self.current_operation_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        current_layout.addWidget(self.progress_bar)
        
        # Control buttons
        controls_layout = QHBoxLayout()
        
        self.cancel_btn = QPushButton("‚èπÔ∏è –û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.cancel_operation)
        self.cancel_btn.setVisible(False)
        apply_button_style(self.cancel_btn, "danger")
        controls_layout.addWidget(self.cancel_btn)
        
        current_layout.addLayout(controls_layout)
        layout.addWidget(current_section)
        
        # Progress Display (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–µ—Å—Å)
        progress_display_section = QGroupBox("üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
        progress_display_layout = QVBoxLayout(progress_display_section)
        
        # Directory info
        dir_info_layout = QHBoxLayout()
        dir_info_layout.addWidget(QLabel("üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞:"))
        self.working_dir_label = QLabel("–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
        apply_label_style(self.working_dir_label, "caption")
        dir_info_layout.addWidget(self.working_dir_label)
        dir_info_layout.addStretch()
        progress_display_layout.addLayout(dir_info_layout)
        
        # Auto progress info
        auto_info = QLabel("‚ö° –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        apply_label_style(auto_info, "subtitle")
        progress_display_layout.addWidget(auto_info)
        
        layout.addWidget(progress_display_section)
        
        # Results section
        results_section = QGroupBox("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        results_layout = QVBoxLayout(results_section)
        
        self.results_label = QLabel("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∞—Å—å")
        apply_label_style(self.results_label, "caption")
        results_layout.addWidget(self.results_label)
        
        layout.addWidget(results_section)
        layout.addStretch()
    
    def update_working_directory(self):
        """Update working directory display"""
        if hasattr(self.parent_window, 'current_directory'):
            input_dir = self.parent_window.current_directory
            output_dir = os.path.join(input_dir, "PhotoSorter_Results")
            self.working_dir_label.setText(f"{os.path.basename(input_dir)} ‚Üí PhotoSorter_Results")
            apply_label_style(self.working_dir_label, "success")
            self.scan_btn.setEnabled(True)
        else:
            self.working_dir_label.setText("–ù–µ –≤—ã–±—Ä–∞–Ω–∞")
            apply_label_style(self.working_dir_label, "caption")
    
    def start_full_processing(self):
        """Start full automated processing"""
        if not hasattr(self.parent_window, 'current_directory'):
            return

        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        input_dir = self.parent_window.current_directory
        output_dir = os.path.join(input_dir, "PhotoSorter_Results")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            os.makedirs(output_dir, exist_ok=True)
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return

        self.parent_window.output_directory = output_dir

        # Create job and add to queue
        import uuid
        job = ProcessingJob(
            job_id=str(uuid.uuid4()),
            input_path=input_dir,
            output_path=output_dir,
            job_type="full_process"
        )

        self.parent_window.queue_manager.add_job(job)
        self.current_operation_label.setText("üöÄ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        self.working_dir_label.setText(f"{os.path.basename(input_dir)} ‚Üí PhotoSorter_Results")

        # Show success message
        QMessageBox.information(
            self, "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            f"–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
            f"üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {os.path.basename(input_dir)}\n"
            f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {os.path.basename(output_dir)}\n\n"
            f"–ü—Ä–æ—Ü–µ—Å—Å:\n"
            f"‚Ä¢ üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ\n"
            f"‚Ä¢ üë§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü\n"
            f"‚Ä¢ üìã –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞\n"
            f"‚Ä¢ üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫\n\n"
            f"–°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –Ω–∞ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ!"
        )
        
    def start_scanning(self):
        """Start scanning"""
        self.current_operation_label.setText("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        self.scan_status.setText("–í –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        apply_label_style(self.scan_status, "warning")
        
    def start_face_detection(self):
        """Start face detection"""
        self.current_operation_label.setText("üë§ –ü–æ–∏—Å–∫ –ª–∏—Ü...")
        self.detect_status.setText("–í –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        apply_label_style(self.detect_status, "warning")
        
    def start_sorting(self):
        """Start sorting"""
        self.current_operation_label.setText("üìã –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞...")
        self.sort_status.setText("–í –ø—Ä–æ—Ü–µ—Å—Å–µ...")
        apply_label_style(self.sort_status, "warning")
        
    def cancel_operation(self):
        """Cancel current operation"""
        self.current_operation_label.setText("‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


class BrowseTab(QWidget):
    """Browse Photos and Results Tab"""
    
    def __init__(self, parent):
        super().__init__()
        self.parent_window = parent
        self.setup_ui()
    
    def setup_ui(self):
        """Setup browse tab UI"""
        layout = QHBoxLayout(self)
        
        # Left panel - photo list
        left_panel = QGroupBox("üñºÔ∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        left_layout = QVBoxLayout(left_panel)
        
        self.photo_list = QListView()
        self.photo_list.setModel(self.parent_window.photo_model)
        self.photo_list.clicked.connect(self.on_photo_selected)
        left_layout.addWidget(self.photo_list)
        
        layout.addWidget(left_panel)
        
        # Right panel - photo viewer and info
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        
        # Photo viewer
        viewer_section = QGroupBox("üñºÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        viewer_layout = QVBoxLayout(viewer_section)
        viewer_layout.addWidget(self.parent_window.photo_viewer)
        right_layout.addWidget(viewer_section)
        
        # Photo info
        info_section = QGroupBox("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QGridLayout(info_section)
        
        self.filename_label = QLabel("-")
        self.size_label = QLabel("-")
        self.faces_label = QLabel("-")
        
        info_layout.addWidget(QLabel("üìÑ –§–∞–π–ª:"), 0, 0)
        info_layout.addWidget(self.filename_label, 0, 1)
        info_layout.addWidget(QLabel("üìè –†–∞–∑–º–µ—Ä:"), 1, 0)
        info_layout.addWidget(self.size_label, 1, 1)
        info_layout.addWidget(QLabel("üë§ –õ–∏—Ü–∞:"), 2, 0)
        info_layout.addWidget(self.faces_label, 2, 1)
        
        right_layout.addWidget(info_section)
        layout.addWidget(right_panel)
    
    def on_photo_selected(self, index):
        """Handle photo selection"""
        photo_path = self.parent_window.photo_model.get_photo_path(index.row())
        if photo_path:
            self.parent_window.photo_viewer.load_photo(photo_path)
            self.update_photo_info(photo_path)
    
    def update_photo_info(self, photo_path):
        """Update photo information"""
        filename = os.path.basename(photo_path)
        size_bytes = os.path.getsize(photo_path)
        size_mb = size_bytes / (1024 * 1024)
        size_text = f"{size_mb:.1f} –ú–ë" if size_mb >= 1 else f"{size_bytes / 1024:.1f} –ö–ë"
        
        self.filename_label.setText(filename)
        self.size_label.setText(size_text)
        self.faces_label.setText("0")


class QueueTab(QWidget):
    """Queue Management Tab"""
    
    def __init__(self, parent):
        super().__init__()
        self.parent_window = parent
        self.setup_ui()
    
    def setup_ui(self):
        """Setup queue tab UI"""
        layout = QVBoxLayout(self)
        
        # Queue widget
        self.queue_widget = QueueWidget(self.parent_window.queue_manager)
        layout.addWidget(self.queue_widget)


class SettingsTab(QWidget):
    """Settings and Advanced Options Tab"""
    
    def __init__(self, parent):
        super().__init__()
        self.parent_window = parent
        self.setup_ui()
    
    def setup_ui(self):
        """Setup settings tab UI"""
        layout = QVBoxLayout(self)
        
        # Processing settings
        processing_section = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        processing_layout = QVBoxLayout(processing_section)
        
        # InsightFace status
        insight_status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if self.parent_window.insight_sorter else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        insight_label = QLabel(f"üß† InsightFace: {insight_status}")
        apply_label_style(insight_label, "success" if self.parent_window.insight_sorter else "danger")
        processing_layout.addWidget(insight_label)
        
        if not self.parent_window.insight_sorter:
            install_label = QLabel("üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install insightface onnxruntime")
            apply_label_style(install_label, "caption")
            processing_layout.addWidget(install_label)
        
        layout.addWidget(processing_section)
        
        # About section
        about_section = QGroupBox("‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_layout = QVBoxLayout(about_section)
        
        about_text = QLabel(
            "Photo Sorter v2.0\n"
            "–£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –ª—é–¥—è–º\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç:\n"
            "‚Ä¢ OpenCV –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü\n"
            "‚Ä¢ InsightFace –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "‚Ä¢ PyQt6 –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
        )
        apply_label_style(about_text, "caption")
        about_layout.addWidget(about_text)
        
        layout.addWidget(about_section)
        layout.addStretch()


class MainWindowTabbed(QMainWindow):
    """Main application window with tabbed interface"""
    
    def __init__(self):
        super().__init__()
        self.init_components()
        self.setup_ui()
        self.setup_menu()
        self.setup_status_bar()
    
    def init_components(self):
        """Initialize all components"""
        self.setWindowTitle("üñºÔ∏è Photo Sorter - –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        self.setGeometry(100, 100, 1200, 800)
        self.setStyleSheet(MODERN_STYLESHEET)
        
        # Initialize core components
        self.photo_viewer = PhotoViewer()
        self.directory_scanner = DirectoryScanner()
        self.face_processor = SimpleFaceProcessor()
        self.photo_sorter = PhotoSorter()
        self.photo_model = PhotoListModel()
        self.queue_manager = QueueManager()
        
        # Initialize InsightFace if available
        try:
            self.insight_sorter = InsightFaceSorter()
        except Exception:
            self.insight_sorter = None
    
    def setup_ui(self):
        """Setup the tabbed user interface"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Create tab widget
        self.tab_widget = QTabWidget()
        
        # Create tabs
        self.overview_tab = OverviewTab(self)
        self.processing_tab = ProcessingTab(self)
        self.browse_tab = BrowseTab(self)
        self.queue_tab = QueueTab(self)
        self.settings_tab = SettingsTab(self)
        
        # Add tabs
        self.tab_widget.addTab(self.overview_tab, "üè† –û–±–∑–æ—Ä")
        self.tab_widget.addTab(self.processing_tab, "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞")
        self.tab_widget.addTab(self.browse_tab, "üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä")
        self.tab_widget.addTab(self.queue_tab, "‚è≥ –û—á–µ—Ä–µ–¥—å")
        self.tab_widget.addTab(self.settings_tab, "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # Connect tab change
        self.tab_widget.currentChanged.connect(self.on_tab_changed)
        
        layout.addWidget(self.tab_widget)
    
    def setup_menu(self):
        """Setup menu bar"""
        menubar = self.menuBar()
        
        # File menu
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É...", self)
        open_action.triggered.connect(self.overview_tab.select_input_directory)
        file_menu.addAction(open_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # View menu
        view_menu = menubar.addMenu("–í–∏–¥")
        
        for i, (name, _) in enumerate([
            ("–û–±–∑–æ—Ä", "üè†"),
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞", "‚öôÔ∏è"),
            ("–ü—Ä–æ—Å–º–æ—Ç—Ä", "üñºÔ∏è"),
            ("–û—á–µ—Ä–µ–¥—å", "‚è≥"),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üîß")
        ]):
            action = QAction(f"{name}", self)
            action.triggered.connect(lambda checked, idx=i: self.tab_widget.setCurrentIndex(idx))
            view_menu.addAction(action)
    
    def setup_status_bar(self):
        """Setup status bar"""
        self.status_bar = self.statusBar()
        self.status_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_bar.addWidget(self.status_label)
    
    def on_tab_changed(self, index):
        """Handle tab change"""
        tab_names = ["–û–±–∑–æ—Ä", "–û–±—Ä–∞–±–æ—Ç–∫–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä", "–û—á–µ—Ä–µ–¥—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        if index < len(tab_names):
            self.status_label.setText(f"–û—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞: {tab_names[index]}")
        
        # Update processing tab when switched to
        if index == 1:  # Processing tab
            self.processing_tab.update_working_directory()
