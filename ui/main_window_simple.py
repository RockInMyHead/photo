"""
Main Window for Photo Sorting Application - Simple Version
Uses OpenCV face detection without face-recognition library
"""

from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QTreeView, QListView, QLabel, QPushButton, QProgressBar,
    QStatusBar, QMenuBar, QMenu, QFileDialog, QMessageBox,
    QGroupBox, QGridLayout, QScrollArea, QLineEdit
)
from PyQt6.QtCore import Qt, QDir, QThread, pyqtSignal
from PyQt6.QtGui import QIcon, QAction, QPixmap
import os

from .photo_viewer import PhotoViewer
from .directory_scanner import DirectoryScanner
from .face_processor_simple import SimpleFaceProcessor
from .photo_list_model import PhotoListModel
from .photo_sorter import PhotoSorter
from .insight_sorter import InsightFaceSorter
from .queue_manager import QueueManager, ProcessingJob, JobStatus, QueueWidget
from .modern_styles import MODERN_STYLESHEET, COLORS, apply_button_style, apply_label_style


class MainWindow(QMainWindow):
    """Main application window - Simple version"""

    def __init__(self):
        try:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MainWindow...")
            super().__init__()
            self.setWindowTitle("üñºÔ∏è Photo Sorter - –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            self.setGeometry(100, 100, 1400, 900)
            
            # Apply modern styling
            self.setStyleSheet(MODERN_STYLESHEET)
            print("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –ø—Ä–∏–º–µ–Ω–µ–Ω")

            # Initialize components
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
            self.photo_viewer = PhotoViewer()
            print("PhotoViewer —Å–æ–∑–¥–∞–Ω")
            self.directory_scanner = DirectoryScanner()
            print("DirectoryScanner —Å–æ–∑–¥–∞–Ω")
            self.face_processor = SimpleFaceProcessor()
            print("SimpleFaceProcessor —Å–æ–∑–¥–∞–Ω")
            self.photo_sorter = PhotoSorter()
            print("PhotoSorter —Å–æ–∑–¥–∞–Ω")

            # Initialize queue manager
            self.queue_manager = QueueManager()
            print("QueueManager —Å–æ–∑–¥–∞–Ω")

            # Initialize InsightFaceSorter with error handling
            try:
                self.insight_sorter = InsightFaceSorter()
                print("InsightFaceSorter —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"InsightFaceSorter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                self.insight_sorter = None
            self.photo_model = PhotoListModel()
            print("PhotoListModel —Å–æ–∑–¥–∞–Ω")

            # Connect signals
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
            self.directory_scanner.progress_updated.connect(self.update_progress)
            self.directory_scanner.scanning_finished.connect(self.on_scanning_finished)
            self.face_processor.progress_updated.connect(self.update_progress)
            self.face_processor.processing_finished.connect(self.on_face_processing_finished)
            self.photo_sorter.progress_updated.connect(self.update_progress)
            self.photo_sorter.sorting_finished.connect(self.on_sorting_finished)

            # Connect InsightFaceSorter signals only if available
            if self.insight_sorter is not None:
                self.insight_sorter.progress_updated.connect(self.update_progress)
                self.insight_sorter.sorting_finished.connect(self.on_insight_finished)
                self.insight_sorter.error_signal.connect(self.on_insight_error)
            print("–°–∏–≥–Ω–∞–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

            # Setup UI
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            self.setup_ui()
            print("UI –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ __init__ MainWindow: {e}")
            import traceback
            traceback.print_exc()
            raise

    def cancel_operation(self):
        """Cancel current operation"""
        self.directory_scanner.requestInterruption()
        self.face_processor.requestInterruption()
        self.photo_sorter.requestInterruption()
        if self.insight_sorter is not None:
            self.insight_sorter.requestInterruption()

        self.status_label.setText("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        self.enable_buttons()
        self.hide_progress()

        self.setup_ui()
        self.setup_menu()
        self.setup_status_bar()

    def enable_buttons(self):
        """Enable all control buttons"""
        self.scan_btn.setEnabled(True)
        if hasattr(self.directory_scanner, 'photos') and self.directory_scanner.photos:
            self.process_faces_btn.setEnabled(True)
            # Only enable InsightFace button if sorter is available
            if self.insight_sorter is not None:
                self.sort_insight_btn.setEnabled(True)
            else:
                self.sort_insight_btn.setEnabled(False)
        if hasattr(self.face_processor, 'face_groups') and self.face_processor.face_groups:
            self.sort_btn.setEnabled(True)

    def hide_progress(self):
        """Hide progress bar and cancel button"""
        self.progress_bar.setVisible(False)
        self.cancel_btn.setVisible(False)

    def setup_ui(self):
        """Setup the main user interface"""
        try:
            print("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI...")
            central_widget = QWidget()
            self.setCentralWidget(central_widget)
            print("–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —Å–æ–∑–¥–∞–Ω")

            main_layout = QVBoxLayout(central_widget)

            # Top control panel
            control_panel = self.create_control_panel()
            main_layout.addWidget(control_panel)

            # Main content area with splitter
            splitter = QSplitter(Qt.Orientation.Horizontal)

            # Left panel - Directory tree and photo list
            left_panel = self.create_left_panel()
            splitter.addWidget(left_panel)

            # Right panel - Photo viewer and details
            right_panel = self.create_right_panel()
            splitter.addWidget(right_panel)

            splitter.setSizes([400, 800])
            main_layout.addWidget(splitter)

            # Progress bar and cancel button
            progress_layout = QHBoxLayout()
            self.progress_bar = QProgressBar()
            self.progress_bar.setVisible(False)
            progress_layout.addWidget(self.progress_bar)

            self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
            self.cancel_btn.setVisible(False)
            self.cancel_btn.clicked.connect(self.cancel_operation)
            progress_layout.addWidget(self.cancel_btn)

            main_layout.addLayout(progress_layout)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ setup_ui: {e}")
            import traceback
            traceback.print_exc()
        finally:
            # Setup menu and status bar regardless of UI setup success
            try:
                self.setup_menu()
                self.setup_status_bar()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ setup_menu/status_bar: {e}")

    def create_control_panel(self):
        """Create the top control panel"""
        group = QGroupBox("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        layout = QVBoxLayout(group)

        # Directory selection section
        dir_section = QGroupBox("üìÅ –í—ã–±–æ—Ä –ø–∞–ø–∫–∏")
        dir_layout = QVBoxLayout(dir_section)
        
        # Directory selection row
        dir_row_layout = QHBoxLayout()
        
        self.select_dir_btn = QPushButton("üìÇ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
        self.select_dir_btn.clicked.connect(self.select_directory)
        apply_button_style(self.select_dir_btn, "large")
        dir_row_layout.addWidget(self.select_dir_btn)

        # Manual path input
        self.path_input = QLineEdit()
        self.path_input.setPlaceholderText("üí° –ò–õ–ò –≤–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: D:\\–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)")
        self.path_input.returnPressed.connect(self.manual_path_entered)
        dir_row_layout.addWidget(self.path_input)

        dir_layout.addLayout(dir_row_layout)
        layout.addWidget(dir_section)

        # Quick action section
        quick_section = QGroupBox("üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫")
        quick_layout = QHBoxLayout(quick_section)
        
        # Main START button
        self.start_btn = QPushButton("üé¨ –°–¢–ê–†–¢ - –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        self.start_btn.clicked.connect(self.start_full_processing)
        self.start_btn.setEnabled(False)
        apply_button_style(self.start_btn, "large success")
        quick_layout.addWidget(self.start_btn)
        
        # Output directory button
        self.output_btn = QPushButton("üì§ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        self.output_btn.clicked.connect(self.select_output_directory)
        self.output_btn.setEnabled(False)
        quick_layout.addWidget(self.output_btn)
        
        layout.addWidget(quick_section)

        # Manual control section
        manual_section = QGroupBox("‚öôÔ∏è –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        manual_layout = QVBoxLayout(manual_section)
        
        # First row of manual buttons
        buttons_row1 = QHBoxLayout()
        
        self.scan_btn = QPushButton("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å")
        self.scan_btn.clicked.connect(self.start_scanning)
        self.scan_btn.setEnabled(False)
        buttons_row1.addWidget(self.scan_btn)

        self.process_faces_btn = QPushButton("üë§ –ù–∞–π—Ç–∏ –ª–∏—Ü–∞")
        self.process_faces_btn.clicked.connect(self.start_face_processing)
        self.process_faces_btn.setEnabled(False)
        buttons_row1.addWidget(self.process_faces_btn)

        manual_layout.addLayout(buttons_row1)
        
        # Second row of manual buttons
        buttons_row2 = QHBoxLayout()
        
        self.sort_btn = QPushButton("üìã –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º")
        self.sort_btn.clicked.connect(self.sort_photos)
        self.sort_btn.setEnabled(False)
        buttons_row2.addWidget(self.sort_btn)

        # Insight sort button (move-only)
        insight_text = "üß† InsightFace (—Ç–æ—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)"
        if self.insight_sorter is None:
            insight_text += " [–ù–ï–î–û–°–¢–£–ü–ï–ù]"
        self.sort_insight_btn = QPushButton(insight_text)
        self.sort_insight_btn.clicked.connect(self.sort_photos_insight)
        self.sort_insight_btn.setEnabled(False)
        apply_button_style(self.sort_insight_btn, "warning" if self.insight_sorter is None else "")
        buttons_row2.addWidget(self.sort_insight_btn)

        manual_layout.addLayout(buttons_row2)
        layout.addWidget(manual_section)

        # Info section
        info_section = QGroupBox("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QVBoxLayout(info_section)
        
        info_label = QLabel("‚ú® –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü OpenCV")
        apply_label_style(info_label, "caption")
        info_layout.addWidget(info_label)
        
        if self.insight_sorter is None:
            warning_label = QLabel("‚ö†Ô∏è –î–ª—è —Ç–æ—á–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install insightface onnxruntime")
            apply_label_style(warning_label, "warning")
            info_layout.addWidget(warning_label)
        
        layout.addWidget(info_section)

        return group

    def create_left_panel(self):
        """Create the left panel with directory tree, photo list and queue"""
        panel = QWidget()
        layout = QVBoxLayout(panel)

        # Directory tree section
        dir_section = QGroupBox("üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫")
        dir_section_layout = QVBoxLayout(dir_section)
        self.dir_tree = QTreeView()
        self.dir_tree.setMaximumHeight(180)
        dir_section_layout.addWidget(self.dir_tree)
        layout.addWidget(dir_section)

        # Photo list section
        photos_section = QGroupBox("üñºÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        photos_section_layout = QVBoxLayout(photos_section)
        self.photo_list = QListView()
        self.photo_list.setModel(self.photo_model)
        self.photo_list.clicked.connect(self.on_photo_selected)
        photos_section_layout.addWidget(self.photo_list)
        layout.addWidget(photos_section)

        # Queue section
        queue_section = QGroupBox("‚è≥ –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        queue_section_layout = QVBoxLayout(queue_section)
        self.queue_widget = QueueWidget(self.queue_manager)
        queue_section_layout.addWidget(self.queue_widget)
        layout.addWidget(queue_section)

        return panel

    def create_right_panel(self):
        """Create the right panel with photo viewer and details"""
        panel = QWidget()
        layout = QVBoxLayout(panel)

        # Photo viewer section
        viewer_section = QGroupBox("üñºÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
        viewer_layout = QVBoxLayout(viewer_section)
        viewer_layout.addWidget(self.photo_viewer)
        layout.addWidget(viewer_section)

        # Photo details section
        details_group = QGroupBox("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        details_layout = QGridLayout(details_group)

        # Create styled labels
        self.filename_label = QLabel("-")
        self.path_label = QLabel("-")
        self.size_label = QLabel("-")
        self.faces_label = QLabel("-")

        # Style the info labels
        apply_label_style(self.filename_label, "subtitle")
        apply_label_style(self.path_label, "caption")
        apply_label_style(self.size_label, "caption")
        apply_label_style(self.faces_label, "success")

        # Create field labels
        file_lbl = QLabel("üìÑ –§–∞–π–ª:")
        path_lbl = QLabel("üìÅ –ü—É—Ç—å:")
        size_lbl = QLabel("üìè –†–∞–∑–º–µ—Ä:")
        faces_lbl = QLabel("üë§ –õ–∏—Ü–∞:")

        apply_label_style(file_lbl, "caption")
        apply_label_style(path_lbl, "caption")
        apply_label_style(size_lbl, "caption")
        apply_label_style(faces_lbl, "caption")

        details_layout.addWidget(file_lbl, 0, 0)
        details_layout.addWidget(self.filename_label, 0, 1)
        details_layout.addWidget(path_lbl, 1, 0)
        details_layout.addWidget(self.path_label, 1, 1)
        details_layout.addWidget(size_lbl, 2, 0)
        details_layout.addWidget(self.size_label, 2, 1)
        details_layout.addWidget(faces_lbl, 3, 0)
        details_layout.addWidget(self.faces_label, 3, 1)

        # Progress info section
        progress_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        progress_layout = QVBoxLayout(progress_group)
        
        self.stats_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        apply_label_style(self.stats_label, "caption")
        progress_layout.addWidget(self.stats_label)
        
        layout.addWidget(details_group)
        layout.addWidget(progress_group)
        
        return panel

    def setup_menu(self):
        """Setup the menu bar"""
        menubar = self.menuBar()

        # File menu
        file_menu = menubar.addMenu("–§–∞–π–ª")

        open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É...", self)
        open_action.triggered.connect(self.select_directory)
        file_menu.addAction(open_action)

        file_menu.addSeparator()

        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # Tools menu
        tools_menu = menubar.addMenu("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")

        scan_action = QAction("–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", self)
        scan_action.triggered.connect(self.start_scanning)
        tools_menu.addAction(scan_action)

        process_action = QAction("–ù–∞–π—Ç–∏ –ª–∏—Ü–∞", self)
        process_action.triggered.connect(self.start_face_processing)
        tools_menu.addAction(process_action)

        sort_action = QAction("–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≥—Ä—É–ø–ø–∞–º", self)
        sort_action.triggered.connect(self.sort_photos)
        tools_menu.addAction(sort_action)

    def setup_status_bar(self):
        """Setup the status bar"""
        self.status_bar = self.statusBar()
        self.status_label = QLabel("–ì–æ—Ç–æ–≤–æ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)")
        self.status_bar.addWidget(self.status_label)

    def select_directory(self):
        """Select directory containing photos"""
        try:
            directory = QFileDialog.getExistingDirectory(
                self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"
            )
        except Exception as e:
            # Fallback: try without parent widget
            directory = QFileDialog.getExistingDirectory(
                None, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"
            )

        if directory:
            self.set_directory(directory)
        else:
            self.status_label.setText("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")

    def manual_path_entered(self):
        """Handle manual path input"""
        path = self.path_input.text().strip()
        if path:
            # Expand ~ for home directory
            path = os.path.expanduser(path)
            # Convert to absolute path
            path = os.path.abspath(path)

            if os.path.isdir(path):
                self.set_directory(path)
                self.path_input.clear()
            else:
                self.status_label.setText(f"–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")

    def set_directory(self, directory):
        """Set the current directory and update UI"""
        self.current_directory = directory
        self.scan_btn.setEnabled(True)
        self.start_btn.setEnabled(True)
        self.output_btn.setEnabled(True)
        # Only enable InsightFace button if sorter is available
        if self.insight_sorter is not None:
            self.sort_insight_btn.setEnabled(True)
        self.path_input.setText(directory)
        self.status_label.setText(f"üìÇ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {directory}")
        self.stats_label.setText(f"–í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {os.path.basename(directory)}")

    def select_output_directory(self):
        """Select output directory for sorted photos"""
        try:
            directory = QFileDialog.getExistingDirectory(
                self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
            )
        except Exception as e:
            directory = QFileDialog.getExistingDirectory(
                None, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
            )

        if directory:
            self.output_directory = directory
            self.output_btn.setText(f"üì§ {os.path.basename(directory)}")
            apply_button_style(self.output_btn, "success")
            self.status_label.setText(f"üì§ –ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {directory}")
        else:
            self.status_label.setText("–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")

    def start_full_processing(self):
        """Start full automated processing"""
        if not hasattr(self, 'current_directory'):
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.")
            return

        if not hasattr(self, 'output_directory'):
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        # Create a full processing job
        import uuid
        job = ProcessingJob(
            job_id=str(uuid.uuid4()),
            input_path=self.current_directory,
            output_path=self.output_directory,
            job_type="full_process"
        )

        # Add to queue
        self.queue_manager.add_job(job)
        
        # Update UI
        self.status_label.setText("üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...")
        self.stats_label.setText("–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
        
        # Show info
        QMessageBox.information(
            self, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞",
            f"–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
            f"–í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {self.current_directory}\n"
            f"–í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {self.output_directory}\n\n"
            f"–ü—Ä–æ—Ü–µ—Å—Å –≤–∫–ª—é—á–∞–µ—Ç:\n"
            f"‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
            f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ª–∏—Ü\n"
            f"‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ª—é–¥—è–º\n"
            f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
        )

    def start_scanning(self):
        """Start scanning directory for photos"""
        if not hasattr(self, 'current_directory'):
            return

        self.progress_bar.setVisible(True)
        self.cancel_btn.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")

        # Disable buttons during operation
        self.scan_btn.setEnabled(False)
        self.process_faces_btn.setEnabled(False)
        self.sort_btn.setEnabled(False)
        self.sort_insight_btn.setEnabled(False)

        self.directory_scanner.scan_directory(self.current_directory)

    def start_face_processing(self):
        """Start face detection using OpenCV"""
        if not hasattr(self.directory_scanner, 'photos') or not self.directory_scanner.photos:
            return

        self.progress_bar.setVisible(True)
        self.cancel_btn.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("–ü–æ–∏—Å–∫ –ª–∏—Ü —Å –ø–æ–º–æ—â—å—é OpenCV...")

        # Disable buttons during operation
        self.scan_btn.setEnabled(False)
        self.process_faces_btn.setEnabled(False)
        self.sort_btn.setEnabled(False)
        self.sort_insight_btn.setEnabled(False)

        self.face_processor.process_photos(self.directory_scanner.photos)

    def sort_photos(self):
        """Sort photos by detected people"""
        if not hasattr(self.face_processor, 'face_groups') or not self.face_processor.face_groups:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                  "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.")
            return

        # Ask user for output directory
        output_dir = QFileDialog.getExistingDirectory(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"
        )

        if not output_dir:
            return

        self.progress_bar.setVisible(True)
        self.status_label.setText("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º...")

        self.photo_sorter.sort_photos(
            self.face_processor.face_groups,
            output_dir,
            self.face_processor.group_names
        )

    def on_photo_selected(self, index):
        """Handle photo selection in the list"""
        photo_path = self.photo_model.get_photo_path(index.row())
        if photo_path:
            self.photo_viewer.load_photo(photo_path)
            self.update_photo_info(photo_path)

    def update_photo_info(self, photo_path):
        """Update photo information display"""
        filename = os.path.basename(photo_path)
        path = os.path.dirname(photo_path)

        # Get file size
        size_bytes = os.path.getsize(photo_path)
        size_mb = size_bytes / (1024 * 1024)
        size_text = f"{size_mb:.1f} –ú–ë" if size_mb >= 1 else f"{size_bytes / 1024:.1f} –ö–ë"

        self.filename_label.setText(filename)
        self.path_label.setText(path)
        self.size_label.setText(size_text)

        # Check if faces were detected for this photo
        if hasattr(self.face_processor, 'photo_faces'):
            faces_count = len(self.face_processor.photo_faces.get(photo_path, []))
            self.faces_label.setText(str(faces_count))
            if faces_count > 0:
                apply_label_style(self.faces_label, "success")
            else:
                apply_label_style(self.faces_label, "caption")
        else:
            self.faces_label.setText("0")
            apply_label_style(self.faces_label, "caption")

    def update_progress(self, value, text):
        """Update progress bar"""
        self.progress_bar.setValue(value)
        if text:
            self.status_label.setText(text)

    def on_scanning_finished(self, photos):
        """Handle completion of directory scanning"""
        self.hide_progress()
        self.enable_buttons()
        self.photo_model.update_photos(photos)
        self.status_label.setText(f"üì∏ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
        self.stats_label.setText(f"–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(photos)} —Ñ–∞–π–ª–æ–≤")

    def on_face_processing_finished(self, face_groups):
        """Handle completion of face processing"""
        self.hide_progress()
        self.enable_buttons()

        total_faces = sum(len(group) for group in face_groups.values())
        self.status_label.setText(f"üë• –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: {len(face_groups)}, –≤—Å–µ–≥–æ –ª–∏—Ü: {total_faces}")
        self.stats_label.setText(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {len(face_groups)} –≥—Ä—É–ø–ø, {total_faces} –ª–∏—Ü")

        if face_groups:
            QMessageBox.information(
                self, "üéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                f"–ù–∞–π–¥–µ–Ω–æ {len(face_groups)} –≥—Ä—É–ø–ø –ª–∏—Ü –Ω–∞ {total_faces} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.\n\n"
                "‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º."
            )
        else:
            QMessageBox.information(
                self, "‚ö†Ô∏è –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω",
                "–õ–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —á–µ—Ç–∫–∏–º–∏ –ª–∏—Ü–∞–º–∏ –∞–Ω—Ñ–∞—Å."
            )

    def on_sorting_finished(self, sorted_groups):
        """Handle completion of photo sorting"""
        self.hide_progress()
        self.enable_buttons()

        if sorted_groups:
            total_photos = sum(len(photos) for photos in sorted_groups.values())
            QMessageBox.information(
                self, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n"
                f"–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {len(sorted_groups)}\n"
                f"–í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos}\n\n"
                f"–ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ."
            )
            self.status_label.setText(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(sorted_groups)} –≥—Ä—É–ø–ø")
        else:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
            self.status_label.setText("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")

    def sort_photos_insight(self):
        """Run InsightFace-based sort with move-only export"""
        if self.insight_sorter is None:
            QMessageBox.warning(self, "InsightFace –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                              "InsightFace –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install insightface onnxruntime hdbscan scikit-learn tqdm")
            return

        if not hasattr(self, 'current_directory'):
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.")
            return

        output_dir = QFileDialog.getExistingDirectory(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤)"
        )
        if not output_dir:
            return

        self.progress_bar.setVisible(True)
        self.cancel_btn.setVisible(True)
        self.progress_bar.setValue(0)
        self.status_label.setText("InsightFace: –¥–µ—Ç–µ–∫—Ü–∏—è –∏ –ø–µ—Ä–µ–Ω–æ—Å...")

        # Disable buttons during operation
        self.scan_btn.setEnabled(False)
        self.process_faces_btn.setEnabled(False)
        self.sort_btn.setEnabled(False)
        self.sort_insight_btn.setEnabled(False)

        # Device: CPU by default
        self.insight_sorter.sort_with_insight(
            input_dir=self.current_directory,
            output_dir=output_dir,
            device="cpu"
        )

    def on_insight_finished(self, stats: dict):
        self.hide_progress()
        self.enable_buttons()

        if not stats.get("ok"):
            QMessageBox.warning(self, "InsightFace", f"–û—à–∏–±–∫–∞: {stats.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            self.status_label.setText("InsightFace: –æ—à–∏–±–∫–∞")
            return
        groups = stats.get("groups", 0)
        moved = stats.get("moved", 0)
        out_dir = stats.get("out", "")
        QMessageBox.information(
            self, "InsightFace",
            f"–ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {moved}\n–°–æ–∑–¥–∞–Ω–æ –≥—Ä—É–ø–ø: {groups}\n–í—ã—Ö–æ–¥: {out_dir}"
        )
        self.status_label.setText(f"InsightFace: {groups} –≥—Ä—É–ø–ø, {moved} –ø–µ—Ä–µ–Ω–æ—Å–æ–≤")

    def on_insight_error(self, message: str):
        self.hide_progress()
        self.enable_buttons()

        QMessageBox.warning(
            self, "InsightFace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏",
            message + "\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements_insight.txt"
        )
        self.status_label.setText("InsightFace: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
